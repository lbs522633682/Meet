Index: README.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n开发日志 思考每一个遇到的问题\r\n\r\n-----------------------------------20210408---------------------------\r\n## 会话管理\r\n\r\n    1. 官方文档\r\n        https://docs.rongcloud.cn/v4/views/im/noui/guide/private/conversation/getall/android.html\r\n\r\n    2. tablayout 和viewpage的联动 \r\n\r\n        ？？ BEHAVIOR_SET_USER_VISIBLE_HINT, BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT}\r\n\r\n    3. SwipeRefreshLayout\r\n\r\n        androidx.swiperefreshlayout.widget.SwipeRefreshLayout\r\n\r\n    4. Conversation api\r\n\r\n        https://www.rongcloud.cn/docs/api/android/imlib_v4/\r\n\r\n## 全部好友列表\r\n\r\n    1. 查询自己得好友列表\r\n\r\n    2. 展示UI，完成下拉刷新\r\n\r\n-----------------------------------20210407---------------------------\r\n## 已完成\r\n\r\n    1. 处理添加好友消息的UI点击\r\n\r\n    2. 保存好友到数据库中\r\n-----------------------------------20210406---------------------------\r\n## 已完成\r\n\r\n    1. 添加好友的提示框\r\n\r\n    2. 测试另一个手机账号  12510603000\r\n\r\n    3. 发送添加好友的消息\r\n\r\n    4. 接受添加好友的消息 \r\n\r\n    5. 使用本地数据库，存储好友关系\r\n\r\n        LitePal 数据库集成\r\n\r\n        https://github.com/guolindev/LitePal\r\n\r\n    6. 创建接收好友添加的消息 并展示效果\r\n\r\n    7. 处理重复请求添加好友的信息\r\n\r\n## EventBus的事件栈\r\n\r\n    https://github.com/greenrobot/EventBus\r\n\r\n### EventBus 四面八方都来消息，怎么区分？\r\n\r\n    可以在messageEvent中定义一个type 进行区分 消息类别\r\n\r\n## 问题\r\n\r\nCaused by: android.view.InflateException: You must specifiy a layout in the include tag: <include layout=\"@layout/layoutID\" />\r\n\r\n    错误写法\r\n\r\n    <include\r\n            android:id=\"@+id/item_empty_view\"\r\n            android:visibility=\"gone\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout=\"@layout/layout_empty_view\" />\r\n\r\n    正确写法：（layout前不需要android标签）\r\n    <include\r\n            android:id=\"@+id/item_empty_view\"\r\n            android:visibility=\"gone\"\r\n            android:layout_height=\"match_parent\"\r\n            android:layout_width=\"match_parent\"\r\n            layout=\"@layout/layout_empty_view\" />\r\n\r\n\r\n\r\n-----------------------------------20210402---------------------------\r\n\r\n## 未完成\r\n\r\n    4. 发送添加好友消息\r\n\r\n    5. 自定义消息内容\r\n\r\n    6. 接受添加好友消息\r\n\r\n## 已完成\r\n    1. 兼容小于 8.0 的通讯录导入功能\r\n\r\n    2. 融云的消息体系\r\n\r\n        https://www.rongcloud.cn/docs/message_architecture.html\r\n        \r\n\r\n    3. 测试消息发送 和接收\r\n    // Message{conversationType=PRIVATE, targetId='b757a3c83d', messageId=1, messageDirection=SEND, senderUserId='b757a3c83d', receivedStatus=io.rong.imlib.model.Message$ReceivedStatus@71d6636, sentStatus=SENT, receivedTime=0, sentTime=1617348347101, objectName='RC:TxtMsg', content=TextMessage{content='很高兴认识你', extra='null'}, extra='null', readReceiptInfo=null, messageConfig=null, UId='BOI5-SK9N-E386-HI5F'}\r\n\t\r\n\r\n-----------------------------------20200811---------------------------\r\n## 融云的继承与服务链接\r\n### 融云sdk集成\r\n-----------------------------------20200730---------------------------\r\n## Rxjava 的使用\r\n### 引用\r\n    io.reactivex.rxjava2:rxjava:2.2.2\r\n    io.reactivex.rxjava2:rxandroid:2.1.0\"\r\n\r\n### 举例\r\n\r\n    disposable = Observable.create(new ObservableOnSubscribe<String>() { // 创建一个发射器，发射器的返回类型是 String的\r\n\r\n        @Override\r\n        public void subscribe(ObservableEmitter<String> emitter) throws Exception { // 在发射器中执行请求过程\r\n            String json = HttpManager.getInstance().postCloudToken(map);\r\n\r\n            emitter.onNext(json); // 使用发射器将  结果 发射出去\r\n            emitter.onComplete(); // 告知发射器 执行完成\r\n        }\r\n    }).subscribeOn(Schedulers.newThread()) // 订阅者 子线程\r\n            .observeOn(AndroidSchedulers.mainThread()) // 观察者 主线程\r\n            .subscribe(new Consumer<String>() { 使用接收器 接收结果\r\n                @Override\r\n                public void accept(String s) throws Exception {\r\n                    // {\"code\":200,\"userId\":\"b757a3c83d\",\"token\":\"Edr2bmMy5wa59uh+UAR0Oa3dR1vFJod+bYKsvjVGsBI=@yby3.cn.rongnav.com;yby3.cn.rongcfg.com\"}\r\n                    LogUtils.i(\"createToken s = \" + s);\r\n                    parsingToken(s);\r\n                }\r\n            });\r\n\r\n## 获取融云的token\r\n    功能：即时通讯 跟音视频\r\n\r\n## 融云参数 自己的\r\n    账号： 15967153155 li666666\r\n    appkey：25wehl3u20a0w\r\n    appSecrect: SRlG9pAHfH\r\n\r\n## android 7.0 的明文访问\r\n    cleartextTrafficPermitted\r\n-----------------------------------20200728---------------------------\r\n## 封装万能的RecycleView适配器\r\n    主要是相关的 泛型的使用\r\n\r\n## 自定义的头部拉伸ScrollView\r\n    1.思路 触摸事件 放大、回弹效果\r\n\r\n### 步骤\r\n    1.在onFinishInflate中获取到 mZoomView\r\n\r\n    2.处理触摸移动事件\r\n\r\n    3.计算移动的距离\r\n\r\n    4.根据移动的距离 计算缩放的比例\r\n\r\n    5.使用LayoutParams 对view进行缩放\r\n\r\n    6.缩放的过程中 使用setMargins 对view设置间距\r\n\r\n    7.在松开手指后处理回弹事件 使用属性动画，将view从当前 移动回 原始的view\r\n\r\n## 从通讯录匹配好友\r\n    1.获取联系人\r\n    2.查询联系人是否在后台已注册\r\n    3.显示查询到的联系人在界面上\r\n-----------------------------------20200727---------------------------\r\n## 从通讯录匹配好友\r\n    1.获取联系人\r\n-----------------------------------20200522---------------------------\r\n## 搜索好友与推荐\r\n### Bmob模拟用户数据\r\n### Bmob根据条件查询好友\r\n    \r\n    手机号码：12510603000\r\n### Bmob推荐好友\r\n\r\n### ActionBar跟Layout之间有一条阴影\r\n    解决：\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\r\n\r\n            // 设置阴影\r\n            getSupportActionBar().setElevation(0);\r\n        }\r\n\r\n-----------------------------------20200515---------------------------\r\n## 头像上传 与 FileProvider2\r\n\r\n### Bmob更新用户资料\r\n    上传头像失败\r\n    原因：Bmob需要使用独立域名设置  设置 - 应用配置 - 独立域名 100/年\r\n    免费的方法，使用老师的key：f8efae5debf319071b44339cf51153fc\r\n    如果有数据冲突，类名不一致即可\r\n\r\n    问题：老师的key的短信条数可能用完，改为账号密码\r\n\r\n    账号：15967153155 pwd：123456  objID = objIde3d14f363c nickName = 老李\r\n-----------------------------------20200514---------------------------\r\n## 头像上传 与 FileProvider\r\n\r\n### Android7.0 FileProvider\r\n\r\n### 从相册获取头像\r\n\r\n#### 圆形头像裁剪库\r\n    https://github.com/hdodenhof/CircleImageView\r\n\r\n    依赖：implementation 'de.hdodenhof:circleimageview:3.1.0'\r\n\r\n### 解决URI获取不到真实地址的问题\r\n\r\n    问题：跳转到相册，返回之后 通过data.getData().getPath(); 图片地址为：/external/images/media/134216，并非SD卡根目录地址\r\n    解决：通过返回的uri 去系统查询真实地址  /storage/emulated/0/MagazineUnlock/magazine-unlock-01-2.3.4332-_035B5B61EAFA5DB2B9982DCA612BA53C.jpg\r\n        /**\r\n     * 根据Uri获取真实的图片地址\r\n     * @param context\r\n     * @param uri\r\n     * @return\r\n     */\r\n    public String getRealImgPathFromUri(Context context, Uri uri) {\r\n\r\n        String[] proj = {MediaStore.Images.Media.DATA};\r\n        CursorLoader cursorLoader = new CursorLoader(context, uri, proj, null, null, null);\r\n        Cursor cursor = cursorLoader.loadInBackground();\r\n        int columnIndex = cursor.getColumnIndex(MediaStore.Images.Media.DATA);\r\n        cursor.moveToFirst();\r\n        String path = cursor.getString(columnIndex);\r\n        cursor.close();\r\n        return path;\r\n    }\r\n\r\n\r\n\r\n### android 7.0 明文访问\r\n\r\n-----------------------------------20200513---------------------------\r\n## 3D星球的实现\r\n    tagcloud ： com.moxun:tagcloudlib:1.2.0\r\n\r\ncircleimageview?\r\n\r\n## Fragment 优化与切换\r\n### Fragment三个包\r\n    1.android.app.Fragment\r\n    2.android.app.v4.Fragment 向下兼容\r\n    3.androidx.fragment.app.Fragment\r\n\r\n### Fragment 关键类\r\n    1.FragmentManager 碎片化的管理类\r\n    2.FragmentTransation 操作Fragment做一些事务\r\n\r\n### FragMent 切换方式\r\n    1.replace 会重新走生命周期 用的较少\r\n    2.show/hide\r\n### Fragment 优化\r\n    onAttachFragment 此方法防止重叠\r\n    场景：当应用内存紧张的时候，系统会回收掉 Frament对象；\r\n    再次进入的时候会重新创建Fragment，并非原来的对象，我们无法控制，导致重叠\r\n\r\n## APP启动优化\r\n### 启动类型\r\n    1.冷启动 第一次开始  或是 重装启动\r\n    2.热启动 第二次或之后启动\r\n    3.温启动 退到后台，由于某些原因被杀死，但整体数据还保存\r\n\r\n### Shell命令 检测启动时间\r\n    1. shell命令\r\n    adb shell am start -S -W [packageName]/[packageName.MainActivity]\r\n        1. thisTime 最后一个Act的启动耗时\r\n        2. TotalTime 启动一连串Act的总耗时\r\n        3. WaitTime 应用创建时间 + TotalTime\r\n        4. 应用创建时间 WaitTime - TotalTime\r\n\r\n    2. Log打印\r\n\r\n        Android 4.4 开始 ActivityManager增加了 Log TAG= displayed\r\n\r\n        05-13 10:48:54.758 376-407/? I/ActivityManager: Displayed com.mumu.launcher/.Launcher: +1s494ms\r\n        05-13 11:02:45.471 376-407/? I/ActivityManager: Displayed plat.skytv.client.education/plat.skytv.client.qh.cm.activity.SplashActivity: +2s606ms\r\n        05-13 11:02:51.985 376-407/? I/ActivityManager: Displayed plat.skytv.client.education/plat.skytv.main.activity.MainActivity: +346ms\r\n\r\n### 启动优化手段 \r\n    1.视图优化 黑屏白屏  治标不治本\r\n        1.1 设置主题透明 style中设置 windowIsTranslucent  值为true\r\n        1.2 设置启动图片  style中 windowBackground 加一张图片  windowDrawSystemBarBackgrounds 为false\r\n    2.代码优化\r\n        2.1 优化Application\r\n\r\n            --必要的组件在程序主页去初始化，不要在Application中\r\n\r\n            --如果一定在Application中初始化，尽可能延时 handler.postdelay\r\n\r\n            --必要的组件，子线程中初始化 new Thread().start\r\n        2.2 不需要繁琐的布局\r\n        2.3 阻塞UI线程的操作\r\n        2.4 加载BItmap/ 大图\r\n        2.5 其他一些占用主线程的操作\r\n\r\n#### 冷启动经过的步骤\r\n    1.第一次安装，加载应用程序并启动\r\n    2.启动后显示一个空白的窗口\r\n    3.启动、创建了应用进程\r\n\r\n#### APP 内部\r\n    1. 创建APP 对象、Application对象\r\n    2. 启动主线程（Main/UI Thread）\r\n    3. 创建应用入口/ LAUNCHER\r\n    4. 填充VIewGroup中的View\r\n    5. 绘制view measure -> layout-> draw\r\n-----------------------------------20200512---------------------------\r\n## 动态权限与窗口权限\r\n### 权限分类 普通 危险 特殊\r\n### 判断权限是否请求\r\n### 处理请求权限的响应\r\n### 窗口权限\r\n    可显示在其他应用之上的权限\r\n\r\n## 自定义LoadingView\r\n\r\n## 自定义DialogView\r\n\r\n\r\n## Bmob的短信验证 and 用户注册\r\n\r\n### 注册支持的方式 \r\n    1.账号\r\n    2.邮箱\r\n    3.电话\r\n    4.第三方\r\n\r\n### 发送短信验证码\r\n\r\n### 短信验证码登录\r\n\r\n### 获取本地对象\r\n\r\n    15967153155 objectID= b757a3c83d\r\n\r\n\r\n-----------------------------------20200322---------------------------\r\n## Bmob\r\n    使用github账号关联Bmob账号\r\n\r\n### 增删改查\r\n\r\n    主要操作的是ObjectID（Bmob 用户的唯一标识）\r\n\r\n### 导入文档\r\n    http://doc.bmob.cn/data/android/index.html#androidstudio\r\n\r\n### 应用秘钥\r\n    Application ID：a3fc2edca9eccc01110110970f1b4091\r\n    REST API KEY：035be8e708594acbf688ea7ba25d3f11\r\n    Secret KEY:e764231d99ff17b2\r\n    MasterKey:0908e532d8f5c00e136b85816ec3b67f\r\n-----------------------------------20200321---------------------------\r\n## 自定义View 拖拽验证码\r\n    1.获取图片\r\n    2.创建一个空的Bitmap\r\n    3.将图片绘制到空的Bitmap上\r\n    4.将bgBitmap绘制到view上\r\n\r\n## 完成内容 GuideAct\r\n    /**\r\n     * 1.viewpage:适配器 | 帧动画\r\n     * 2.小圆点的逻辑\r\n     * 3.歌曲的播放\r\n     * 4.属性动画的旋转\r\n     * 5.跳转\r\n     */\r\n\r\n## MediaPlayerManager 播放raw文件\r\n\r\n    // 针对7.0及以上\r\n    setDataSource(@NonNull AssetFileDescriptor afd)\r\n    // 都可用\r\n    setDataSource(FileDescriptor fd, long offset, long length)\r\n\r\n## ViewPagerAdapter 封装\r\n\r\n## ViewPager 预加载\r\n    没必要一次性将所有item加载出来\r\n\r\n    mViewPager.setOffscreenPageLimit(mPageList.size());\r\n\r\n## 引导页 帧动画\r\n### 帧动画播放\r\n    1.获取view上设置的帧动画\r\n\r\n    2.调用start方法即可\r\n\r\n### 帧动画设置\r\n    res/drawable/xxx.xml\r\n    <animation-list xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        android:oneshot=\"false\">\r\n\r\n        <-- oneshot 是否只显示一次，false：永久循环 -->\r\n\r\n        <item android:drawable=\"@drawable/img_guide_smile_1\" android:duration=\"2000\"/>\r\n        <item android:drawable=\"@drawable/img_guide_smile_2\" android:duration=\"2000\"/>\r\n        <item android:drawable=\"@drawable/img_guide_smile_3\" android:duration=\"2000\"/>\r\n        <item android:drawable=\"@drawable/img_guide_smile_4\" android:duration=\"2000\"/>\r\n        ...\r\n    </animation-list>\r\n\r\n-----------------------------------20200320---------------------------\r\n## Git忽略某些不重要的文件\r\n\r\n    1.在Git工作区的根目录下创建一个特殊的.gitignore文件，\r\n\r\n    2.通用的 配置 Git已经为我们考虑到了：https://github.com/github/gitignore\r\n\r\n## Git将远程仓库的代码导入到本地文件夹\r\n    1.新建一个文件夹，右键Git Bash Here到这个文件夹\r\n\r\n    2. git clone XXXX (XXXX为项目在gihub上的http地址)\r\n\r\n\r\n## Git 修改代码之后再次上传\r\n\r\n    1.右键Git Bash Here到项目文件夹\r\n\r\n    2.git add . 添加新增文件\r\n\r\n    3.git commit -m \"XXXX\" (XXX为注释 必须填)\r\n\r\n    4.git push origin master\r\n        输入用户名（github昵称），密码即可\r\n\r\n    参考：1.https://www.cnblogs.com/zhaomeizi/p/9268987.html\r\n\r\n## Git 上传本地仓库到Git （安装 （略过））\r\n    1.新建一个文件夹，右键Git Bash Here到这个文件夹，git init命令初始化 变成 Git可管理的仓库（本地）\r\n\r\n    2.将项目代码粘贴到本文件夹，可通过git status 来查看本地仓库当前状态\r\n\r\n    3.通过git add .  将此文件夹 所有 文件 添加到本地仓库，期间可一直通过 git status查询本地仓库状态\r\n\r\n    4.使用git commit -m \"上传日志\"， 此处上传日志必须填写，否则会有问题\r\n\r\n    5.创建SSH KEY，如果C盘用户目录下有没有.ssh目录，有的话看下里面有没有id_rsa和id_rsa.pub这两个文件，如果没有\r\n    使用 ssh-keygen -t rsa -C \"youremail@example.com\"  然后一路回车就会在.ssh目录下生成这两个文件\r\n\r\n    6.登录Github,找到右上角的图标，打开点进里面的Settings，再选中里面的SSH and GPG KEYS，点击右上角的New SSH key，\r\n    然后Title里面随便填，再把刚才id_rsa.pub里面的内容复制到Title下面的Key内容框里面，最后点击Add SSH key，这样就完成了SSH Key的加密\r\n\r\n    7.在Github上创建一个Git仓库，createRepository，（注：不要勾选Initialize this repository with a README）\r\n\r\n    8.远程仓库创建完成之后，与本地仓库进行关联（后面是远程仓库的地址）\r\n    git remote add origin https://github.com/guyibang/TEST2.git\r\n\r\n    9.关联成功之后，就是把本地代码推送到远程端\r\n        9.1 如果远程仓库为空（首次上传），使用 git push -u origin master\r\n        9.2 如果远程仓库不为空，git push origin master\r\n\r\n        等待项目上传完成，显示：\r\n            Counting objects: 100% (90/90), done.\r\n            Delta compression using up to 4 threads\r\n            Compressing objects: 100% (71/71), done.\r\n            Writing objects: 100% (90/90), 1.35 MiB | 264.00 KiB/s, done.\r\n            Total 90 (delta 4), reused 0 (delta 0)\r\n            remote: Resolving deltas: 100% (4/4), done.\r\n            To https://github.com/******/TestGit.git\r\n             * [new branch]      master -> master\r\n            Branch 'master' set up to track remote branch 'master' from 'origin'.\r\n\r\n    参考：https://blog.csdn.net/zamamiro/article/details/70172900\r\n\r\n\r\n-----------------------------------20200319---------------------------\r\n\r\n## AndroidStudio代码生成利器－LayoutCreator\r\n\r\n    https://www.jianshu.com/p/46d0f191178f\r\n\r\n## 引导页 与 帧动画\r\n\r\n## implementation 与 api\r\n\r\n    implementation 只限于本应用使用\r\n\r\n    api 外部模块也可引用到\r\n\r\n## App适配刘海屏\r\n    OPPO: https://open.oppomobile.com/wiki/doc#id=10159\r\n    VIVO: https://dev.vivo.com.cn/documentCenter/doc/103\r\n    小米：https://dev.mi.com/console/doc/detail?pld=1160\r\n    小米水滴屏幕:\r\n    htts://dev.mi.com/console/doc/detail?pld=1293\r\n\r\n    华为..\r\n\r\n    可翻看相关手机的开发者文档\r\n\r\n-----------------------------------20200318---------------------------\r\n\r\n## MediaPlayerManager完成\r\n    // 仅支持7.0 及以上\r\n    1.setDataSource(AssetFileDescriptor afd)\r\n\r\n    2.自定义进度的回调监听\r\n\r\n## 增加 闪屏 登录 引导页\r\n\r\n-----------------------------------20200317---------------------------\r\n## MediaPlayer 使用\r\n### 两种初始化方法\r\n    MediaPlayer.create();\r\n    new MediaPlayer();\r\n\r\n### 公开接口\r\n    1.setOnCompletionListener 流媒体播放完毕的回调\r\n    2.setOnErrorListener 播放中发生错误的回调\r\n    3.setOnPreparedListener 装载流媒体完成的回调\r\n    4.setOnSeekCompleteListener 使用seekTo()结束时的回调\r\n\r\n## 沉浸式状态栏 基于anroid5.0开发适配\r\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {}\r\n\r\n### SYSTEM_UI_FLAG_FULLSCREEN  全屏 无系统状态栏（时间 电量一类的）\r\n    getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_FULLSCREEN);\r\n\r\n### View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE  全屏 无系统状态栏 且无标题（下拉显示）\r\n\r\n### View.SYSTEM_UI_FLAG_FULLSCREEN\r\n                        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                        | View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n                        | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY\r\n                        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION\r\n                        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // 全屏 无系统状态栏(下拉显示) 且无标题，无虚拟按键 --适合游戏\r\n\r\n### View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                        | View.SYSTEM_UI_FLAG_LAYOUT_STABLE\r\n\r\n    getWindow().setStatusBarColor(Color.TRANSPARENT); // 非全屏 有标题 有系统状态栏 跟主页颜色一致\r\n\r\n### getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN\r\n                        | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);\r\n\r\n                getWindow().setStatusBarColor(Color.TRANSPARENT);\r\n\r\n                getSupportActionBar().hide(); // 全屏 沉浸式 无标题 有系统状态栏 跟主页颜色一致\r\n\r\n### getSupportActionBar().hide(); 也可在theme中设置 noActionBar主题\r\n\r\n\r\n## git仓库\r\n    https://git.imooc.com/coding-390/Meet\r\n\r\n## 课程中所使用到的第三方平台的Key,只作为参考,建议自行申请\r\n    Bmob Key：f8efae5debf319071b44339cf51153fc  用户系统\r\n    融云 Key：k51hidwqk4yeb 音视频\r\n    融云 Secret：os83U32SrAG\r\n    高德地图 Key：abde3c5f58d7dd9a762019906cef613e\r\n    高德地图 Web Key：389bc08b815e3146bfd1e45fd7f47fc5\r\n    讯飞 Key：5b18db70\r\n\r\n-----------------------------------20200316---------------------------\r\n## 自定义Gradle 配置文件\r\n1.自定义Gradle配置文件（一个文件修改所有的Moudle）\r\n    1.统一性\r\n    2.便于管理\r\n    3.版本管理\r\n\r\n2.引入自定义的属性\r\n\r\n3.配置gradle的常量\r\n\r\nbuildTypes {\r\n        debug{\r\n            // 自定义gradle常量\r\n            buildConfigField(\"boolean\", \"LOG_DEBUG\", \"true\")\r\n            buildConfigField(\"String\", \"LOG_TAG\", \"\\\"Meet\\\"\")\r\n        }\r\n        release {\r\n            buildConfigField(\"boolean\", \"LOG_DEBUG\", \"false\")\r\n        }\r\n    }\r\n\r\n## 提升Gradle的构建速度\r\nGradle 构建的三个性能指标\r\n    --全量编译\r\n    --代码增量编译 修改代码增删改\r\n    --资源增量编译 修改res下\r\n1.避免激活旧的Multidex 方法数64k 如果超过自动启动\r\n\r\n    api<21时解决了这个问题，但并没有优化，之后的版本做了优化\r\n\r\n2.禁止Multidex APK构建\r\n    发布到应用市场 多渠道打包/全部打包 但是Debug时候，不需要这么多\r\n\r\n    setting-build-complier  -PdevBuild\r\n\r\n3.最小化资源打包\r\n    defaultConfig {\r\n            // 调试，release要删除\r\n            resConfigs(\"zh\", \"xxhdpi\")\r\n        }\r\n\r\n4.禁用PNG压缩（开发阶段不需要使用）\r\n    aaptOptions.cruncherEnabled = false\r\n\r\n5.PNG 转WebP 文件\r\n\r\n6.instant run 热启动 已经自动集成\r\n\r\n7.不适用动态版本标识库（加号） \"appcompat\": 'androidx.appcompat:appcompat:1.1.0+'\r\n\r\n8.Gradle内存调优 默认分配1.5g 如果更大的项目 可调高\r\n    gradle.properties->org.gradle.jvmargs=-Xmx1536m\r\n\r\n9.开启Gradle的构建缓存\r\n    gradle.properties->org.gradle.caching=true\r\n\r\n10.使用最新的Gradle插件\r\n\r\n## Bmob 数据 短信 即时通讯\r\n\r\n    文档：http://doc.bmob.cn/data/android/develop_doc/#2\r\n\r\n## 融云的即时通讯\r\n\r\n    文档：https://www.rongcloud.cn/docs/quick_start.html\r\n\r\n## 融云的音视频模块\r\n    --CallKit 界面组件（融云封装的）\r\n    --CallLib api库\r\n    --RTCLib 基于信令 的 数据交换 最底层\r\n\r\n## 单例封装通用工具\r\n    --创建Framework Moudle 隔离工具类和逻辑代码\r\n\r\n    -- 静态封装Log日志\r\n\r\n    -- 时间转换类\r\n\r\n## 问题：\r\n    1.时间转换类为什么少了8个小时?\r\n\r\n      没有考虑到时区的问题，使用中国时区的话这个差值应该是28800000ms，所以在计算小时的实现需要加上少了的时区\r\n\r\n      long hours = ((ms + 28800000) % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60);\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- README.txt	(revision 2adccf8b34c34177273dbee7c357609fed1dc9b6)
+++ README.txt	(date 1617889719759)
@@ -412,6 +412,10 @@
     </animation-list>
 
 -----------------------------------20200320---------------------------
+## Git 拉取远程仓库 并关联
+    https://blog.csdn.net/Dakaring/article/details/45742987?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-3.baidujs&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-3.baidujs
+
+    创建复制令牌登录：https://blog.csdn.net/qq_46128318/article/details/111544246
 ## Git忽略某些不重要的文件
 
     1.在Git工作区的根目录下创建一个特殊的.gitignore文件，
